generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
  id             String      @id @default(cuid())
  name           String
  email          String      @unique
  password       String?     // Nullable para permitir usuarios de Google sin contrase√±a
  rol            RolUsuario  @default(CLIENTE)
  direcciones    Direccion[]
  carrito        Carrito?
  ventas         Venta[]
  creadoEn       DateTime    @default(now())
  emailVerified  DateTime?
  image          String?

  // Relaciones para NextAuth
  accounts       Account[]
  sessions       Session[]
}

enum RolUsuario {
  ADMIN
  CLIENTE
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Direccion {
  id            Int      @id @default(autoincrement())
  usuario       User     @relation(fields: [usuarioId], references: [id])
  usuarioId     String
  calle         String
  ciudad        String
  provincia     String
  codigoPostal  String
  pais          String
  principal     Boolean  @default(false)
}

model Categoria {
  id       Int        @id @default(autoincrement())
  nombre   String     @unique
  productos Producto[]
}

model Marca {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

model Promocion {
  id          Int        @id @default(autoincrement())
  descripcion String
  descuento   Float
  productos   Producto[]
}

model Producto {
  id           Int              @id @default(autoincrement())
  nombre       String
  slug         String           @unique
  descripcion  String
  precio       Float
  stock        Int
  categoria    Categoria        @relation(fields: [categoriaId], references: [id])
  categoriaId  Int
  marca        Marca            @relation(fields: [marcaId], references: [id])
  marcaId      Int
  promocion    Promocion?       @relation(fields: [promocionId], references: [id])
  promocionId  Int?
  creadoEn DateTime @default(now())
  imagenes     ImagenProducto[]
  carritoItems CarritoItem[]
  ventaItems   VentaProducto[]
  activo       Boolean          @default(true)
}

model ImagenProducto {
  id          Int      @id @default(autoincrement())
  url         String
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  Int
  publicId    String
}

model Carrito {
  id            Int          @id @default(autoincrement())
  usuario       User         @relation(fields: [usuarioId], references: [id])
  usuarioId     String       @unique
  items         CarritoItem[]
  actualizadoEn DateTime     @updatedAt
}

model CarritoItem {
  id          Int       @id @default(autoincrement())
  carrito     Carrito   @relation(fields: [carritoId], references: [id])
  carritoId   Int
  producto    Producto  @relation(fields: [productoId], references: [id])
  productoId  Int
  cantidad    Int
}

model Venta {
  id          Int              @id @default(autoincrement())
  usuario     User             @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  fecha       DateTime         @default(now())
  total       Float
  productos   VentaProducto[]
  estado      EstadoPedido     @relation(fields: [estadoId], references: [id])
  estadoId    Int
  cupon       CuponDescuento?  @relation(fields: [cuponId], references: [id])
  cuponId     Int?
}

model VentaProducto {
  id             Int       @id @default(autoincrement())
  venta          Venta     @relation(fields: [ventaId], references: [id])
  ventaId        Int
  producto       Producto  @relation(fields: [productoId], references: [id])
  productoId     Int
  cantidad       Int
  precioUnitario Float
}

model EstadoPedido {
  id      Int      @id @default(autoincrement())
  nombre  String
  ventas  Venta[]
}

model CuponDescuento {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  descripcion String?
  porcentaje  Float
  validoHasta DateTime
  ventas      Venta[]
}

model MovimientoFinanciero {
  id          Int           @id @default(autoincrement())
  fecha       DateTime      @default(now())
  tipo        TipoMovimiento
  monto       Float
  descripcion String
}

enum TipoMovimiento {
  INGRESO
  EGRESO
}
