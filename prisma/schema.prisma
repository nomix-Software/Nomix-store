model Review {
  id         Int      @id @default(autoincrement())
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId Int
  usuario    User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  String
  rating     Int      // 1 a 5 estrellas
  comentario String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productoId])
  @@index([usuarioId])
  @@unique([productoId, usuarioId]) // Un usuario solo puede dejar una reseña por producto
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String      @unique
  password      String? // Nullable para permitir usuarios de Google sin contraseña
  rol           RolUsuario  @default(CLIENTE)
  direcciones   Direccion[]
  carrito       Carrito?
  ventas        Venta[]
  creadoEn      DateTime    @default(now())
  emailVerified DateTime?
  image         String?

  // Relaciones para NextAuth
  accounts  Account[]
  sessions  Session[]
  favoritos Favorito[]
  reviews      Review[]

  cuponesAsignados   CuponDescuento[]
  PasswordResetToken PasswordResetToken[]
  juegosGanados      JuegoRaspaGanaDiario[] @relation("JuegosGanados")
  intentosJuego      JuegoRaspaGanaIntento[]
}

enum RolUsuario {
  ADMIN
  CLIENTE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Direccion {
  id           Int     @id @default(autoincrement())
  usuario      User    @relation(fields: [usuarioId], references: [id])
  usuarioId    String
  calle        String
  ciudad       String
  provincia    String
  codigoPostal String
  pais         String
  principal    Boolean @default(false)
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

model Marca {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

model Promocion {
  id          Int        @id @default(autoincrement())
  descripcion String
  descuento   Float
  productos   Producto[]
}

model Producto {
  id           Int              @id @default(autoincrement())
  nombre       String
  slug         String           @unique
  descripcion  String
  precio       Float
  stock        Int
  categoria    Categoria        @relation(fields: [categoriaId], references: [id])
  categoriaId  Int
  marca        Marca            @relation(fields: [marcaId], references: [id])
  marcaId      Int
  promocion    Promocion?       @relation(fields: [promocionId], references: [id])
  promocionId  Int?
  creadoEn     DateTime         @default(now())
  imagenes     ImagenProducto[]
  carritoItems CarritoItem[]
  ventaItems   VentaProducto[]
  favoritos    Favorito[]
  activo       Boolean          @default(true)
  reviews      Review[]
}

model ImagenProducto {
  id         Int      @id @default(autoincrement())
  url        String
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int
  publicId   String
}

model Carrito {
  id            Int           @id @default(autoincrement())
  usuario       User          @relation(fields: [usuarioId], references: [id])
  usuarioId     String        @unique
  items         CarritoItem[]
  actualizadoEn DateTime      @updatedAt
  cupon         CuponDescuento? @relation(fields: [cuponId], references: [id])
  cuponId       Int?
  preferenceId  String?       @unique // ID de preferencia de Mercado Pago
}

model CarritoItem {
  id         Int      @id @default(autoincrement())
  carrito    Carrito  @relation(fields: [carritoId], references: [id])
  carritoId  Int
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int
  cantidad   Int
}

model Venta {
  id        Int             @id @default(autoincrement())
  usuario   User?           @relation(fields: [usuarioId], references: [id])
  usuarioId String?
  fecha     DateTime        @default(now())
  total     Float
  productos VentaProducto[]
  estado    EstadoPedido    @relation(fields: [estadoId], references: [id])
  estadoId  Int
  cupon     CuponDescuento? @relation(fields: [cuponId], references: [id])
  cuponId   Int?

  entrega         Entrega? // <- relación uno a uno, opcional
  metodoPagoId    Int
  metodoPago      MetodoPago @relation(fields: [metodoPagoId], references: [id])
  nombreCliente   String? // info manual
  telefonoCliente String?
  observacion     String?
  paymentId       String?   // ID de pago de Mercado Pago (opcional)
  paymentStatus   String?   // Status de pago de Mercado Pago (opcional)
}

model VentaProducto {
  id             Int      @id @default(autoincrement())
  venta          Venta    @relation(fields: [ventaId], references: [id])
  ventaId        Int
  producto       Producto @relation(fields: [productoId], references: [id])
  productoId     Int
  cantidad       Int
  precioUnitario Float
  descuento      Float? // Porcentaje o monto aplicado (lo que uses)
  total          Float // precioUnitario * cantidad - descuento
}

model EstadoPedido {
  id     Int     @id @default(autoincrement())
  nombre String
  ventas Venta[]
}

model CuponDescuento {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  descripcion String?
  porcentaje  Float
  validoHasta DateTime
  maxUsos     Int?     // Nuevo campo: máximo de usos globales
  ventas      Venta[]
  carritos    Carrito[] // Relación inversa para Prisma
  usuarioId   String? // ID del usuario al que está asignado (opcional)
  usuario     User?   @relation(fields: [usuarioId], references: [id])
}

model JuegoRaspaGanaDiario {
  id               Int      @id @default(autoincrement())
  fecha            DateTime @unique @db.Date
  numerosGanadores Int[]
  creadoEn         DateTime @default(now())
  ganadorId        String?  @unique // Solo un ganador por día
  ganador          User?    @relation("JuegosGanados", fields: [ganadorId], references: [id])
  intentos         JuegoRaspaGanaIntento[]
}

model JuegoRaspaGanaIntento {
  id        Int                  @id @default(autoincrement())
  usuario   User                 @relation(fields: [usuarioId], references: [id])
  usuarioId String
  juego     JuegoRaspaGanaDiario @relation(fields: [juegoId], references: [id])
  juegoId   Int
  creadoEn  DateTime             @default(now())
  @@unique([usuarioId, juegoId])
}

model MovimientoFinanciero {
  id          Int            @id @default(autoincrement())
  fecha       DateTime       @default(now())
  tipo        TipoMovimiento
  monto       Float
  descripcion String
}

enum TipoMovimiento {
  INGRESO
  EGRESO
}

model Entrega {
  id            Int         @id @default(autoincrement())
  venta         Venta?       @relation(fields: [ventaId], references: [id])
  ventaId       Int?         @unique // 1 entrega por venta
  carritoId     Int?         @unique
  tipo          TipoEntrega
  puntoRetiro   String? // Ej: "Sucursal Av. Siempreviva 742", solo si tipo = RETIRO
  direccion     String? // Futuro uso: dirección exacta si tipo = ENVIO
  ciudad        String?
  provincia     String?
  codigoPostal  String?
  pais          String?
  contacto      String? // Nombre o contacto del receptor
  telefono      String? // Teléfono para coordinar
  observaciones String? // Comentarios adicionales
  costoEnvio    Float?  
  creadoEn      DateTime    @default(now())
}

enum TipoEntrega {
  RETIRO
  ENVIO
}

model MetodoPago {
  id     Int     @id @default(autoincrement())
  nombre String
  ventas Venta[]
}

model Favorito {
  id         Int      @id @default(autoincrement())
  usuario    User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  String
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId Int
  agregadoEn DateTime @default(now())

  @@unique([usuarioId, productoId]) // evita duplicados
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
